rownames(ScoreInvHap.Invs.EAS) <- c()
ScoreInvHap.Invs.EAS <- column_to_rownames(ScoreInvHap.Invs.EAS, var = "INV")
colnames(ScoreInvHap.Invs.EAS) <- c("R2")
ScoreInvHap.Invs.EAS <- roundAll(ScoreInvHap.Invs.EAS, 2)
ScoreInvHap.Invs.EAS <- ScoreInvHap.Invs.EAS %>% mutate_at(
vars(`R2`), funs(as.character)
)
BEAGLE.Shapeit_Phase.Invs.EUR <- sel_df(Imputation.Info, imp_method = "Beagle", condition = "Shapeit_Phase", pop = "EUR", filter = "Mean")
Impute2.Shapeit_Phase.Invs.EUR <- sel_df(Imputation.Info, imp_method = "Impute2", condition = "Shapeit_Phase", pop = "EUR", filter = "Mean")
Impute5.Shapeit_Phase.Invs.EUR <- sel_df(Imputation.Info, imp_method = "Impute5", condition = "Shapeit_Phase", pop = "EUR", filter = "Mean")
Minimac4.Shapeit_Phase.Invs.EUR <- sel_df(Imputation.Info, imp_method = "Minimac4", condition = "Shapeit_Phase", pop = "EUR", filter = "Mean")
ScoreInvHap.Invs.EUR <- sel_df(Imputation.Info, imp_method = "ScoreInvHap", pop = "EUR", filter = "Mean")
BEAGLE.Shapeit_Phase.Invs.EUR <- BEAGLE.Shapeit_Phase.Invs.EUR[match(Inv.Data.Plot.EUR$INV, BEAGLE.Shapeit_Phase.Invs.EUR$INV),]
rownames(BEAGLE.Shapeit_Phase.Invs.EUR) <- c()
BEAGLE.Shapeit_Phase.Invs.EUR <- column_to_rownames(BEAGLE.Shapeit_Phase.Invs.EUR, var = "INV")
colnames(BEAGLE.Shapeit_Phase.Invs.EUR) <- c("0.50", "0.70", "0.80", "0.90", "0.95")
BEAGLE.Shapeit_Phase.Invs.EUR <- BEAGLE.Shapeit_Phase.Invs.EUR %>% mutate_at(
vars(`0.50`, `0.70`, `0.80`, `0.90`, `0.95`), funs(as.character)
)
BEAGLE.Shapeit_Phase.Invs.EUR <- roundAll(BEAGLE.Shapeit_Phase.Invs.EUR, 2)
Impute2.Shapeit_Phase.Invs.EUR <- Impute2.Shapeit_Phase.Invs.EUR[match(Inv.Data.Plot.EUR$INV, Impute2.Shapeit_Phase.Invs.EUR$INV),]
rownames(Impute2.Shapeit_Phase.Invs.EUR) <- c()
Impute2.Shapeit_Phase.Invs.EUR <- column_to_rownames(Impute2.Shapeit_Phase.Invs.EUR, var = "INV")
colnames(Impute2.Shapeit_Phase.Invs.EUR) <- c("0.50", "0.70", "0.80", "0.90", "0.95")
Impute2.Shapeit_Phase.Invs.EUR <- Impute2.Shapeit_Phase.Invs.EUR %>% mutate_at(
vars(`0.50`, `0.70`, `0.80`, `0.90`, `0.95`), funs(as.character)
)
Impute2.Shapeit_Phase.Invs.EUR <- roundAll(Impute2.Shapeit_Phase.Invs.EUR, 2)
Impute5.Shapeit_Phase.Invs.EUR <- Impute5.Shapeit_Phase.Invs.EUR[match(Inv.Data.Plot.EUR$INV, Impute5.Shapeit_Phase.Invs.EUR$INV),]
rownames(Impute5.Shapeit_Phase.Invs.EUR) <- c()
Impute5.Shapeit_Phase.Invs.EUR <- column_to_rownames(Impute5.Shapeit_Phase.Invs.EUR, var = "INV")
colnames(Impute5.Shapeit_Phase.Invs.EUR) <- c("0.50", "0.70", "0.80", "0.90", "0.95")
Impute5.Shapeit_Phase.Invs.EUR <- Impute5.Shapeit_Phase.Invs.EUR %>% mutate_at(
vars(`0.50`, `0.70`, `0.80`, `0.90`, `0.95`), funs(as.character)
)
Impute5.Shapeit_Phase.Invs.EUR <- roundAll(Impute5.Shapeit_Phase.Invs.EUR, 2)
Minimac4.Shapeit_Phase.Invs.EUR <- Minimac4.Shapeit_Phase.Invs.EUR[match(Inv.Data.Plot.EUR$INV, Minimac4.Shapeit_Phase.Invs.EUR$INV),]
rownames(Minimac4.Shapeit_Phase.Invs.EUR) <- c()
Minimac4.Shapeit_Phase.Invs.EUR <- column_to_rownames(Minimac4.Shapeit_Phase.Invs.EUR, var = "INV")
colnames(Minimac4.Shapeit_Phase.Invs.EUR) <- c("0.50", "0.70", "0.80", "0.90", "0.95")
Minimac4.Shapeit_Phase.Invs.EUR <- Minimac4.Shapeit_Phase.Invs.EUR %>% mutate_at(
vars(`0.50`, `0.70`, `0.80`, `0.90`, `0.95`), funs(as.character)
)
Minimac4.Shapeit_Phase.Invs.EUR <- roundAll(Minimac4.Shapeit_Phase.Invs.EUR, 2)
ScoreInvHap.Invs.EUR <- ScoreInvHap.Invs.EUR[match(Inv.Data.Plot.EUR$INV, ScoreInvHap.Invs.EUR$INV),]
rownames(ScoreInvHap.Invs.EUR) <- c()
ScoreInvHap.Invs.EUR <- column_to_rownames(ScoreInvHap.Invs.EUR, var = "INV")
colnames(ScoreInvHap.Invs.EUR) <- c("R2")
ScoreInvHap.Invs.EUR <- roundAll(ScoreInvHap.Invs.EUR, 2)
ScoreInvHap.Invs.EUR <- ScoreInvHap.Invs.EUR %>% mutate_at(
vars(`R2`), funs(as.character)
)
BEAGLE.Shapeit_Phase.Imp.AFR <- BEAGLE.Shapeit_Phase.Invs.AFR[BEAGLE.Shapeit_Phase.Invs.AFR$`0.90` >= 0.8,]
BEAGLE.Shapeit_Phase.Imp.AFR <- rownames(BEAGLE.Shapeit_Phase.Imp.AFR[!is.na(BEAGLE.Shapeit_Phase.Imp.AFR$`0.90`),])
BEAGLE.Shapeit_Phase.Imp.AFR
Impute2.Shapeit_Phase.Imp.AFR <- Impute2.Shapeit_Phase.Invs.AFR[Impute2.Shapeit_Phase.Invs.AFR$`0.90` >= 0.8,]
Impute2.Shapeit_Phase.Imp.AFR <- rownames(Impute2.Shapeit_Phase.Imp.AFR[!is.na(Impute2.Shapeit_Phase.Imp.AFR$`0.90`),])
Impute2.Shapeit_Phase.Imp.AFR
Impute5.Shapeit_Phase.Imp.AFR <- Impute5.Shapeit_Phase.Invs.AFR[Impute5.Shapeit_Phase.Invs.AFR$`0.90` >= 0.8,]
Impute5.Shapeit_Phase.Imp.AFR <- rownames(Impute5.Shapeit_Phase.Imp.AFR[!is.na(Impute5.Shapeit_Phase.Imp.AFR$`0.90`),])
Impute5.Shapeit_Phase.Imp.AFR
Minimac4.Shapeit_Phase.Imp.AFR <- Minimac4.Shapeit_Phase.Invs.AFR[Minimac4.Shapeit_Phase.Invs.AFR$`0.90` >= 0.8,]
Minimac4.Shapeit_Phase.Imp.AFR <- rownames(Minimac4.Shapeit_Phase.Imp.AFR[!is.na(Minimac4.Shapeit_Phase.Imp.AFR$`0.90`),])
Minimac4.Shapeit_Phase.Imp.AFR
ScoreInvHap.Invs.AFR$Inv <- rownames(ScoreInvHap.Invs.AFR)
ScoreInvHap.Imp.AFR <- ScoreInvHap.Invs.AFR[!is.na(ScoreInvHap.Invs.AFR$R2),]
ScoreInvHap.Imp.AFR <- rownames(ScoreInvHap.Imp.AFR[ScoreInvHap.Imp.AFR$R2 >= 0.8,])
ScoreInvHap.Imp.AFR
BEAGLE.Shapeit_Phase.Imp.EUR <- BEAGLE.Shapeit_Phase.Invs.EUR[BEAGLE.Shapeit_Phase.Invs.EUR$`0.90` >= 0.8,]
BEAGLE.Shapeit_Phase.Imp.EUR <- rownames(BEAGLE.Shapeit_Phase.Imp.EUR[!is.na(BEAGLE.Shapeit_Phase.Imp.EUR$`0.90`),])
BEAGLE.Shapeit_Phase.Imp.EUR
Impute2.Shapeit_Phase.Imp.EUR <- Impute2.Shapeit_Phase.Invs.EUR[Impute2.Shapeit_Phase.Invs.EUR$`0.90` >= 0.8,]
Impute2.Shapeit_Phase.Imp.EUR <- rownames(Impute2.Shapeit_Phase.Imp.EUR[!is.na(Impute2.Shapeit_Phase.Imp.EUR$`0.90`),])
Impute2.Shapeit_Phase.Imp.EUR
Impute5.Shapeit_Phase.Imp.EUR <- Impute5.Shapeit_Phase.Invs.EUR[Impute5.Shapeit_Phase.Invs.EUR$`0.90` >= 0.8,]
Impute5.Shapeit_Phase.Imp.EUR <- rownames(Impute5.Shapeit_Phase.Imp.EUR[!is.na(Impute5.Shapeit_Phase.Imp.EUR$`0.90`),])
Impute5.Shapeit_Phase.Imp.EUR
Minimac4.Shapeit_Phase.Imp.EUR <- Minimac4.Shapeit_Phase.Invs.EUR[Minimac4.Shapeit_Phase.Invs.EUR$`0.90` >= 0.8,]
Minimac4.Shapeit_Phase.Imp.EUR <- rownames(Minimac4.Shapeit_Phase.Imp.EUR[!is.na(Minimac4.Shapeit_Phase.Imp.EUR$`0.90`),])
Minimac4.Shapeit_Phase.Imp.EUR
ScoreInvHap.Invs.EUR$Inv <- rownames(ScoreInvHap.Invs.EUR)
ScoreInvHap.Imp.EUR <- ScoreInvHap.Invs.EUR[!is.na(ScoreInvHap.Invs.EUR$R2),]
ScoreInvHap.Imp.EUR <- rownames(ScoreInvHap.Imp.EUR[ScoreInvHap.Imp.EUR$R2 >= 0.8,])
ScoreInvHap.Imp.EUR
BEAGLE.Shapeit_Phase.Imp.EAS <- BEAGLE.Shapeit_Phase.Invs.EAS[BEAGLE.Shapeit_Phase.Invs.EAS$`0.90` >= 0.8,]
BEAGLE.Shapeit_Phase.Imp.EAS <- rownames(BEAGLE.Shapeit_Phase.Imp.EAS[!is.na(BEAGLE.Shapeit_Phase.Imp.EAS$`0.90`),])
BEAGLE.Shapeit_Phase.Imp.EAS
Impute2.Shapeit_Phase.Imp.EAS <- Impute2.Shapeit_Phase.Invs.EAS[Impute2.Shapeit_Phase.Invs.EAS$`0.90` >= 0.8,]
Impute2.Shapeit_Phase.Imp.EAS <- rownames(Impute2.Shapeit_Phase.Imp.EAS[!is.na(Impute2.Shapeit_Phase.Imp.EAS$`0.90`),])
Impute2.Shapeit_Phase.Imp.EAS
Impute5.Shapeit_Phase.Imp.EAS <- Impute5.Shapeit_Phase.Invs.EAS[Impute5.Shapeit_Phase.Invs.EAS$`0.90` >= 0.8,]
Impute5.Shapeit_Phase.Imp.EAS <- rownames(Impute5.Shapeit_Phase.Imp.EAS[!is.na(Impute5.Shapeit_Phase.Imp.EAS$`0.90`),])
Impute5.Shapeit_Phase.Imp.EAS
Minimac4.Shapeit_Phase.Imp.EAS <- Minimac4.Shapeit_Phase.Invs.EAS[Minimac4.Shapeit_Phase.Invs.EAS$`0.90` >= 0.8,]
Minimac4.Shapeit_Phase.Imp.EAS <- rownames(Minimac4.Shapeit_Phase.Imp.EAS[!is.na(Minimac4.Shapeit_Phase.Imp.EAS$`0.90`),])
Minimac4.Shapeit_Phase.Imp.EAS
ScoreInvHap.Invs.EAS$Inv <- rownames(ScoreInvHap.Invs.EAS)
ScoreInvHap.Imp.EAS <- ScoreInvHap.Invs.EAS[!is.na(ScoreInvHap.Invs.EAS$R2),]
ScoreInvHap.Imp.EAS <- rownames(ScoreInvHap.Imp.EAS[ScoreInvHap.Imp.EAS$R2 >= 0.8,])
ScoreInvHap.Imp.EAS
AFR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_AFR.txt"), sep = "\t", header = FALSE)
EUR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EUR.txt"), sep = "\t", header = FALSE)
EAS_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EAS.txt"), sep = "\t", header = FALSE)
rsIHA <- AFR_Info$V1[AFR_Info$V2 == "Polymorphic"]
rsIHE <- EUR_Info$V1[EUR_Info$V2 == "Polymorphic"]
rsIHS <- EAS_Info$V1[EAS_Info$V2 == "Polymorphic"]
set_size = function(w, h, factor=1.5) {
s = 1 * factor
options(
repr.plot.width=w * s,
repr.plot.height=h * s,
repr.plot.res=100 / factor,
jupyter.plot_mimetypes='image/png',
jupyter.plot_scale=1
)
}
UpEUR <- as.data.frame(rsIHE)
colnames(UpEUR) <- c("Inv")
rownames(UpEUR) <- UpEUR$Inv
UpEUR$BEAGLE <- sapply(UpEUR$Inv, function(x){
if(!is.na(BEAGLE.Shapeit_Phase.Invs.EUR[x,"0.90"])){
if(BEAGLE.Shapeit_Phase.Invs.EUR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEUR$IMPUTE2 <- sapply(UpEUR$Inv, function(x){
if(!is.na(Impute2.Shapeit_Phase.Invs.EUR[x,"0.90"])){
if(Impute2.Shapeit_Phase.Invs.EUR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEUR$IMPUTE5 <- sapply(UpEUR$Inv, function(x){
if(!is.na(Impute5.Shapeit_Phase.Invs.EUR[x,"0.90"])){
if(Impute5.Shapeit_Phase.Invs.EUR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEUR$Minimac4 <- sapply(UpEUR$Inv, function(x){
if(!is.na(Minimac4.Shapeit_Phase.Invs.EUR[x,"0.90"])){
if(Minimac4.Shapeit_Phase.Invs.EUR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEUR$scoreInvHap <- sapply(UpEUR$Inv, function(x){
if(!is.na(ScoreInvHap.Invs.EUR[x,"R2"])){
if(ScoreInvHap.Invs.EUR[x,"R2"] >= 0.8){
1
} else {0}
} else {0}
})
softs = colnames(UpEUR)[2:length(colnames(UpEUR))]
png("UpSet_EUR_SP.png", height =3000, width = 6000)
set_size(5, 3)
(upset(UpEUR, softs, name = "Software", sort_intersections=FALSE,
base_annotations = list(
'Intersection size' = intersection_size(mapping=aes(fill='bars_color'),
text_colors=c(
on_background='black', on_bar='black'),
text = list(size = 40)
) +
scale_fill_manual(values=c('bars_color'='#ff8b8b'), guide='none') +
ylab(substitute(paste("Imputable inversions (",italic("r\u00B2")," â‰¥ 0.8)"))) +
theme(axis.text = element_text(size = 120, color = "black"))
),
matrix = intersection_matrix(geom = geom_point(size = 30),
outline_color = list(active = "#4e8bff", inactive = "#4eb7ff")),
#stripes = c("#F6F9FF", "#F6F9FF"),
width_ratio = 0.2,
set_sizes = (upset_set_size(geom = geom_bar(color = "#ff8b8b", fill = "#ff8b8b"))) +
geom_text(aes(label=..count..), hjust=-0.4, stat='count', size = 40, color = "black") +
ylim(45,0),
intersections = list("scoreInvHap",
"Minimac4",
"IMPUTE5",
"IMPUTE2",
"BEAGLE",
c("scoreInvHap", "Minimac4"),
c("scoreInvHap", "IMPUTE5"),
c("scoreInvHap", "IMPUTE2"),
c("scoreInvHap", "BEAGLE"),
c("Minimac4", "IMPUTE5"),
c("Minimac4", "IMPUTE2"),
c("Minimac4", "BEAGLE"),
c("IMPUTE5", "IMPUTE2"),
c("IMPUTE5", "BEAGLE"),
c("IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5"),
c("scoreInvHap", "Minimac4", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2"),
c("Minimac4", "IMPUTE5", "BEAGLE"),
c("Minimac4", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE", "Minimac4","scoreInvHap"),
'Outside of known sets'),
sort_sets = F,
stripes = upset_stripes(geom = geom_blank()),
themes = upset_modify_themes(
list(
'intersections_matrix' = theme(axis.text=element_text(size=130, color = "black")),
'overall_sizes'=theme(#axis.text.x=element_text(angle=90),
axis.title = element_text(size = 120))
)
)
) &
theme(plot.background=element_rect(fill='#F6F9FF', color = '#F6F9FF'),
# text = element_text(size = 50),
# axis.text = element_text(size = 60, color = "black"),
axis.title = element_text(size = 120, color = "black"),
line = element_line(colour = NULL))
)
dev.off()
set_size = function(w, h, factor=1.5) {
s = 1 * factor
options(
repr.plot.width=w * s,
repr.plot.height=h * s,
repr.plot.res=100 / factor,
jupyter.plot_mimetypes='image/png',
jupyter.plot_scale=1
)
}
UpAFR <- as.data.frame(rsIHA)
colnames(UpAFR) <- c("Inv")
rownames(UpAFR) <- UpAFR$Inv
UpAFR$BEAGLE <- sapply(UpAFR$Inv, function(x){
if(!is.na(BEAGLE.Shapeit_Phase.Invs.AFR[x,"0.90"])){
if(BEAGLE.Shapeit_Phase.Invs.AFR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpAFR$IMPUTE2 <- sapply(UpAFR$Inv, function(x){
if(!is.na(Impute2.Shapeit_Phase.Invs.AFR[x,"0.90"])){
if(Impute2.Shapeit_Phase.Invs.AFR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpAFR$IMPUTE5 <- sapply(UpAFR$Inv, function(x){
if(!is.na(Impute5.Shapeit_Phase.Invs.AFR[x,"0.90"])){
if(Impute5.Shapeit_Phase.Invs.AFR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpAFR$Minimac4 <- sapply(UpAFR$Inv, function(x){
if(!is.na(Minimac4.Shapeit_Phase.Invs.AFR[x,"0.90"])){
if(Minimac4.Shapeit_Phase.Invs.AFR[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpAFR$scoreInvHap <- sapply(UpAFR$Inv, function(x){
if(!is.na(ScoreInvHap.Invs.AFR[x,"R2"])){
if(ScoreInvHap.Invs.AFR[x,"R2"] >= 0.8){
1
} else {0}
} else {0}
})
softs = colnames(UpAFR)[2:length(colnames(UpAFR))]
png("UpSet_AFR_SP.png", height =3000, width = 6000)
set_size(5, 3)
(upset(UpAFR, softs, name = "Software", sort_intersections=FALSE,
base_annotations = list(
'Intersection size' = intersection_size(mapping=aes(fill='bars_color'),
text_colors=c(
on_background='black', on_bar='black'),
text = list(size = 40)
) +
scale_fill_manual(values=c('bars_color'='#ff8b8b'), guide='none') +
scale_y_continuous(breaks = c(0,5,10), labels = c(0,5,10)) +
ylab(substitute(paste("Imputable inversions (",italic("r\u00B2")," â‰¥ 0.8)"))) +
theme(axis.text = element_text(size = 120, color = "black"))
),
matrix = intersection_matrix(geom = geom_point(size = 30),
outline_color = list(active = "#4e8bff", inactive = "#4eb7ff")),
#stripes = c("#F6F9FF", "#F6F9FF"),
width_ratio = 0.2,
set_sizes = (upset_set_size(geom = geom_bar(color = "#ff8b8b", fill = "#ff8b8b"))) +
geom_text(aes(label=..count..), hjust=-0.4, stat='count', size = 40, color = "black") +
ylim(45,0),
intersections = list("scoreInvHap",
"Minimac4",
"IMPUTE5",
"IMPUTE2",
"BEAGLE",
c("scoreInvHap", "Minimac4"),
c("scoreInvHap", "IMPUTE5"),
c("scoreInvHap", "IMPUTE2"),
c("scoreInvHap", "BEAGLE"),
c("Minimac4", "IMPUTE5"),
c("Minimac4", "IMPUTE2"),
c("Minimac4", "BEAGLE"),
c("IMPUTE5", "IMPUTE2"),
c("IMPUTE5", "BEAGLE"),
c("IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5"),
c("scoreInvHap", "Minimac4", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2"),
c("Minimac4", "IMPUTE5", "BEAGLE"),
c("Minimac4", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE", "Minimac4","scoreInvHap"),
'Outside of known sets'),
sort_sets = F,
stripes = upset_stripes(geom = geom_blank()),
themes = upset_modify_themes(
list(
'intersections_matrix' = theme(axis.text=element_text(size=130, color = "black")),
'overall_sizes'=theme(#axis.text.x=element_text(angle=90),
axis.title = element_text(size = 120))
)
)
) &
theme(plot.background=element_rect(fill='#F6F9FF', color = '#F6F9FF'),
# text = element_text(size = 50),
# axis.text = element_text(size = 60, color = "black"),
axis.title = element_text(size = 120, color = "black"),
line = element_line(colour = NULL))
)
dev.off()
set_size = function(w, h, factor=1.5) {
s = 1 * factor
options(
repr.plot.width=w * s,
repr.plot.height=h * s,
repr.plot.res=100 / factor,
jupyter.plot_mimetypes='image/png',
jupyter.plot_scale=1
)
}
UpEAS <- as.data.frame(rsIHS)
colnames(UpEAS) <- c("Inv")
rownames(UpEAS) <- UpEAS$Inv
UpEAS$BEAGLE <- sapply(UpEAS$Inv, function(x){
if(!is.na(BEAGLE.Shapeit_Phase.Invs.EAS[x,"0.90"])){
if(BEAGLE.Shapeit_Phase.Invs.EAS[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEAS$IMPUTE2 <- sapply(UpEAS$Inv, function(x){
if(!is.na(Impute2.Shapeit_Phase.Invs.EAS[x,"0.90"])){
if(Impute2.Shapeit_Phase.Invs.EAS[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEAS$IMPUTE5 <- sapply(UpEAS$Inv, function(x){
if(!is.na(Impute5.Shapeit_Phase.Invs.EAS[x,"0.90"])){
if(Impute5.Shapeit_Phase.Invs.EAS[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEAS$Minimac4 <- sapply(UpEAS$Inv, function(x){
if(!is.na(Minimac4.Shapeit_Phase.Invs.EAS[x,"0.90"])){
if(Minimac4.Shapeit_Phase.Invs.EAS[x,"0.90"] >= 0.8){
1
} else {0}
} else {0}
})
UpEAS$scoreInvHap <- sapply(UpEAS$Inv, function(x){
if(!is.na(ScoreInvHap.Invs.EAS[x,"R2"])){
if(ScoreInvHap.Invs.EAS[x,"R2"] >= 0.8){
1
} else {0}
} else {0}
})
softs = colnames(UpEAS)[2:length(colnames(UpEAS))]
png("UpSet_EAS_SP.png", height =3000, width = 6000)
set_size(5, 3)
(upset(UpEAS, softs, name = "Software", sort_intersections=FALSE,
base_annotations = list(
'Intersection size' = intersection_size(mapping=aes(fill='bars_color'),
text_colors=c(
on_background='black', on_bar='black'),
text = list(size = 40)
) +
scale_fill_manual(values=c('bars_color'='#ff8b8b'), guide='none') +
ylab(substitute(paste("Imputable inversions (",italic("r\u00B2")," â‰¥ 0.8)"))) +
theme(axis.text = element_text(size = 120, color = "black"))
),
matrix = intersection_matrix(geom = geom_point(size = 30),
outline_color = list(active = "#4e8bff", inactive = "#4eb7ff")),
#stripes = c("#F6F9FF", "#F6F9FF"),
width_ratio = 0.2,
set_sizes = (upset_set_size(geom = geom_bar(color = "#ff8b8b", fill = "#ff8b8b"))) +
geom_text(aes(label=..count..), hjust=-0.4, stat='count', size = 40, color = "black") +
ylim(45,0),
intersections = list("scoreInvHap",
"Minimac4",
"IMPUTE5",
"IMPUTE2",
"BEAGLE",
c("scoreInvHap", "Minimac4"),
c("scoreInvHap", "IMPUTE5"),
c("scoreInvHap", "IMPUTE2"),
c("scoreInvHap", "BEAGLE"),
c("Minimac4", "IMPUTE5"),
c("Minimac4", "IMPUTE2"),
c("Minimac4", "BEAGLE"),
c("IMPUTE5", "IMPUTE2"),
c("IMPUTE5", "BEAGLE"),
c("IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5"),
c("scoreInvHap", "Minimac4", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2"),
c("Minimac4", "IMPUTE5", "BEAGLE"),
c("Minimac4", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "IMPUTE2"),
c("scoreInvHap", "Minimac4", "IMPUTE5", "BEAGLE"),
c("scoreInvHap", "Minimac4", "IMPUTE2", "BEAGLE"),
c("scoreInvHap", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("Minimac4", "IMPUTE5", "IMPUTE2", "BEAGLE"),
c("IMPUTE5", "IMPUTE2", "BEAGLE", "Minimac4","scoreInvHap"),
'Outside of known sets'),
sort_sets = F,
stripes = upset_stripes(geom = geom_blank()),
themes = upset_modify_themes(
list(
'intersections_matrix' = theme(axis.text=element_text(size=130, color = "black")),
'overall_sizes'=theme(#axis.text.x=element_text(angle=90),
axis.title = element_text(size = 120))
)
)
) &
theme(plot.background=element_rect(fill='#F6F9FF', color = '#F6F9FF'),
# text = element_text(size = 50),
# axis.text = element_text(size = 60, color = "black"),
axis.title = element_text(size = 120, color = "black"),
line = element_line(colour = NULL))
)
dev.off()
scales::show_col(hue_pal()(4))
c("#F8766D", "#00BFC4", "#7CAE00", "#C77CFF")
ggstatsplot::ggbetweenstats(
data = dplyr::filter(gapminder::gapminder, year == 2007, continent != "Oceania"),
x = continent,
y = lifeExp,
pairwise.display = "none",
results.subtitle = FALSE
)
# Set the Working Directory
wd <- "/home/aftimo/Documents/practiques/Documents_Elias/IntroMasterAdria/Execute"
# Get the imputed inversion names
Inversions <- read.table(paste0(wd,'/../VCFs/30X/Invs2Imp'),col.names = "INV")
# Get information about the inversions (type: NH/NAHR, breakpoints...)
Inversion.Info <- read.csv(paste0(wd,'/../VCFs/30X/InvCoordenates_hg38_v1.csv'))
# Get the imputation results for the inversions
Imputation.Info <- read.csv(paste0(wd,"/Results_Stats/FullData_Imputation.txt"))
# Get the number of individuals per filter for each inversion and population
Invs.Indiv.Info <- read.csv(paste0(wd,"/Results_Stats/Indiv_per_Filt.txt"))
# Get the inversion frequency per population
AFR_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_AFR.txt"), sep = "\t", header = FALSE)
EUR_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_EUR.txt"), sep = "\t", header = FALSE)
EAS_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_EAS.txt"), sep = "\t", header = FALSE)
# Get the inversion state per population (mono/polymorphic)
AFR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_AFR.txt"), sep = "\t", header = FALSE)
EUR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EUR.txt"), sep = "\t", header = FALSE)
EAS_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EAS.txt"), sep = "\t", header = FALSE)
Inversions
Inversion.Info
# Set the Working Directory
wd <- "/home/aftimo/Documents/practiques/Documents_Elias/IntroMasterAdria/Execute"
# Get the imputed inversion names
Inversions <- read.table(paste0(wd,'/../VCFs/30X/Invs2Imp'),col.names = "INV")
# Get information about the inversions (type: NH/NAHR, breakpoints...) This has inversions not studied in the analysis!!
Inversion.Info <- read.csv(paste0(wd,'/../VCFs/30X/InvCoordenates_hg38_v1.csv'))
# Get the imputation results for the inversions
Imputation.Info <- read.csv(paste0(wd,"/Results_Stats/FullData_Imputation.txt"))
# Get total number of individuals per inversion and population
Indivs.Info <- read.csv(paste0(wd,"/Results_Stats/Inv_Inds.txt"),sep = "\t")
# Get the number of individuals per filter for each inversion and population
Invs.Indiv.Info <- read.csv(paste0(wd,"/Results_Stats/Indiv_per_Filt.txt"))
# Get the inversion frequency per population
AFR_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_AFR.txt"), sep = "\t", header = FALSE)
EUR_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_EUR.txt"), sep = "\t", header = FALSE)
EAS_Freq <- read.csv(paste0(wd,"/Results_Stats/Inversions_Freq_EAS.txt"), sep = "\t", header = FALSE)
# Get the inversion state per population (mono/polymorphic)
AFR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_AFR.txt"), sep = "\t", header = FALSE)
EUR_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EUR.txt"), sep = "\t", header = FALSE)
EAS_Info <- read.csv(paste0(wd,"/Results_Stats/Inversions_State_EAS.txt"), sep = "\t", header = FALSE)
reticulate::repl_python()
reticulate::repl_python()
